# Rustを使ったWeb開発入門

こんにちは(´-ω-`)

この記事では、Rustを利用したWeb開発の基本から、実践的なアプローチ、そして主要なクレート（ライブラリ）の使い方まで、初心者でも理解できるように詳細に解説します。

## 1. なぜRustでWeb開発？

Rustは、高速で安全なシステムプログラミング言語として知られています。Web開発においても、その性能と信頼性から注目され始めています。特に以下の点が魅力です:

- **メモリ安全性:** コンパイル時に多くのエラーを捕まえ、実行時の不具合を未然に防ぐ
- **高速な実行性能:** 他の多くの言語と比べ、低レベルの最適化が可能
- **活発なコミュニティとエコシステム:** クレート（ライブラリ）が充実し、さまざまな用途に対応

## 2. 基本的なセットアップ

### 2.1 Rustのインストール

まずは、Rust公式サイト（[rust-lang.org](https://www.rust-lang.org/)）からRustをインストールします。インストール方法はSDKやツールチェイン管理ツールである`rustup`を利用します。

```sh
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

### 2.2 プロジェクトの作成

Rustでプロジェクトを開始するには、`cargo`コマンドを使用します。プロジェクトの作成は以下のコマンドで行えます:

```sh
cargo new my_web_project
cd my_web_project
```

## 3. Web開発で使われる主要なクレート

RustのWeb開発においては、いくつかのクレートが特に人気です。ここではその概要と使い方を解説します。

### 3.1 Actix-web

Actix-webは、高性能な非同期Webフレームワークです。以下は簡単なサーバー立ち上げの例です:

```rust
use actix_web::{web, App, HttpServer, Responder};

async fn index() -> impl Responder {
    "Hello, Rust Web!"
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new()
            .route("/", web::get().to(index))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}
```

**参考:** [Actix-webの公式ドキュメント](https://actix.rs/)

### 3.2 Rocket

Rocketは、宣言的なルートや簡潔なAPIで知られるWebフレームワークです。Rocketを使用するにはNightly Rustが必要ですが、開発効率が向上します:

```rust
#[macro_use] extern crate rocket;

#[get("/")]
fn index() -> &'static str {
    "Hello, Rocket!"
}

#[launch]
fn rocket() -> _ {
    rocket::build().mount("/", routes![index])
}
```

**参考:** [Rocket公式サイト](https://rocket.rs/)

### 3.3 その他の便利なクレート

- **serde & serde_json:** データのシリアライズとデシリアライズを簡単にします。Web APIやデータの受け渡しに頻繁に使用。

  ```rust
  use serde::{Serialize, Deserialize};
  use serde_json::json;

  #[derive(Serialize, Deserialize)]
  struct User {
      name: String,
      age: u32,
  }

  let user = User { name: "Alice".into(), age: 30 };
  let serialized = serde_json::to_string(&user).unwrap();
  ```

- **reqwest:** HTTPクライアントとして利用でき、外部APIとの通信を簡単に実現します。

  ```rust
  use reqwest;

  #[tokio::main]
  async fn main() -> Result<(), Box<dyn std::error::Error>> {
      let res = reqwest::get("https://www.rust-lang.org/").await?;
      println!("Status: {}", res.status());
      Ok(())
  }
  ```

- **tokio:** 非同期プログラミングのためのランタイム。多くの非同期Webフレームワークやクレートと連携して動作します。

## 4. 実践：簡単なWeb APIの作成

ここでは、Actix-webを使用した簡単なWeb APIを作成する例を紹介します。APIはユーザー情報をJSON形式で返します。

```rust
use actix_web::{web, App, HttpResponse, HttpServer, Responder};
use serde::Serialize;

#[derive(Serialize)]
struct User {
    name: String,
    age: u32,
}

async fn get_user() -> impl Responder {
    let user = User { name: "Bob".into(), age: 25 };
    HttpResponse::Ok().json(user)
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new()
            .route("/user", web::get().to(get_user))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}
```

このコードを実行すると、http://127.0.0.1:8080/user にアクセスすることでユーザー情報がJSON形式で返ります。

## 5. 開発環境の整備

### 5.1 IDEとエディタ

Rust開発にはVisual Studio CodeやIntelliJ IDEAがおすすめです。VSCodeの場合、Rust用の拡張機能（rust-analyzerなど）を導入すると便利です。

### 5.2 デバッグとテスト

`cargo test` を使ってユニットテストを実行できます。さらに、`cargo run` で実際にアプリケーションを動かし、デバッグすることが可能です。

## 6. さらなる学習リソース

- [The Rust Programming Language](https://doc.rust-lang.org/book/)（通称Rust Book）
- [Rust by Example](https://doc.rust-lang.org/rust-by-example/)
- [Rust Cookbook](https://rust-lang-nursery.github.io/rust-cookbook/)
- [Actix-web Documentation](https://actix.rs/)
- [Rocket Documentation](https://rocket.rs/v0.5-rc/guide/)

## 7. まとめ

Rustを使ったWeb開発では、効率的なパフォーマンスと安全性が大きな魅力です。Actix-webやRocketといったフレームワークを利用することで、モダンで拡張性の高いWebサービスを構築できます。初めは簡単なAPIや静的サイトから始め、徐々に機能を追加していくと理解が深まるでしょう。

参考資料:
- [Rust-lang.org](https://www.rust-lang.org/)
- [Actix-web](https://actix.rs/)
- [Rocket](https://rocket.rs/)

がんばって開発しよう(´-ω-`)
